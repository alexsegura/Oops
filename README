  _______                         
  __  __ \______ ________ ________
  _  / / /_  __ \___  __ \__  ___/
  / /_/ / / /_/ /__  /_/ /_(__  ) 
  \____/  \____/ _  .___/ /____/  
                 /_/                        
               
Oops - Object Oriented PrestaShop

Oops is a tool for PrestaShop. 
It is designed to help develop robust modules faster.  

********
FEATURES
********

- Fully object oriented
- MVC layer built on Zend Framework
- ORM layer built on Propel ORM
- Module namespace, easy autoload
- PHP and/or Smarty templates

************
INSTALLATION
************

Download & extract the Oops package from GitHub : https://github.com/downloads/alexsegura/Oops/oops.alpha.zip 

The archive contains 3 folders : 
|-- modules/  => contains an example module written with Oops
|-- override/ => contains an override of the ConfigurationCore class, needed by Oops to register its own autoload. 
|-- tools/    => contains framework & dependencies. 

Just copy the contents of each folder in the corresponding folder of PrestaShop !

Check that Oops is running correctly by installing the "Hello, Oops" module from Modules > Front Office Features. 
Attach the module to the left column to see it running. 

***************
GETTING STARTED
***************

1. Directory structure

Oops offers Zend_Application support to develop modules. 

To learn more about how to build an application using Zend, 
check http://framework.zend.com/manual/en/learning.quickstart.intro.html.
 
Actually, a module created with Oops is a Zend_Application, that is customized
to fit within PrestaShop. 
Every module in Oops is composed of a back-office and a front-office part, each 
with their own controllers and views. 

The following minimal directory structure is assumed for a module : 

mymodule/
|-- mymodule.php
`-- application/
    |-- configs/
    |   `-- application.ini
    |-- back-office/
    |   `-- controllers/
    |   `-- views/
    |       `-- scripts/
    |-- front-office/
    |   `-- controllers/
    |   `-- views/
    |       `-- scripts/
    `-- models/
    
2. Naming conventions

By default, any class in your module is namespaced with the name of the module, i.e the name 
of the main module class. This way, you are sure that your module classes will never conflict 
with another class having the same name. 
Provided your classes follow the naming conventions, you don't have to take care about loading 
them, they will be loaded automatically by Oops. 

Oops uses a custom version of the Module Resource Autoloader, which allows to namespace application 
components in a more sophisticated way. 
http://framework.zend.com/manual/en/zend.loader.autoloader-resource.html#zend.loader.autoloader-resource.module
You can use the standard directory structure in the back/front office components of the application. 

mymodule/
|-- mymodule.php                        => class MyModule
`-- application/
    |-- back-office/
    |   |-- controllers/
    |   |   `-- IndexController.php     => class MyModule_BackOffice_IndexController
    |   `-- forms/
    |       `-- Preferences.php         => class MyModule_BackOffice_Form_Preferences
    |-- front-office/
    |   |-- controllers/
    |   |   `-- IndexController.php     => class MyModule_FrontOffice_IndexController
    |   `-- models/
    |       `-- Foo.php                 => class MyModule_FrontOffice_Model_Foo
    |-- models/
    |   `-- Util.php                    => class MyModule_Model_Util
    `-- forms/
        `-- Subscribe.php               => class MyModule_Form_Subscribe
        
3. Database

Oops relies on Propel for the database side. 
The Propel objects to query the full database schema can be found in the Oops/Db package.
(Please note that not all the relationships are built). 

To learn more about how to use Propel for CRUD : http://www.propelorm.org/documentation/03-basic-crud.html

To simplify database usage, Oops uses the nested_set behavior for easy manipulation of the categories tree, 
and the i18n behavior for all the tables that have a *_lang related table. 
- http://www.propelorm.org/behaviors/nested-set.html
- http://www.propelorm.org/behaviors/i18n.html 

Example : verify if product #1 belongs to category #42

$product     = Oops_Db_ProductQuery :: create()->findPk(1);
$category_42 = Oops_Db_CategoryQuery :: create()->findPk(42);

// Get all the categories of a product in one method !
foreach ($product->getCategories() as $category) {
    // All standard tree operations available !
    if ($category->isDescendantOf($category_42)) {
        // Translated automatically !
        $name = $product->getName(); 
        echo "Product $name belongs to category #42 !";
    }
}









