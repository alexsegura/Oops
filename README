  _______                         
  __  __ \______ ________ ________
  _  / / /_  __ \___  __ \__  ___/
  / /_/ / / /_/ /__  /_/ /_(__  ) 
  \____/  \____/ _  .___/ /____/  
                 /_/                        
               
Oops - Object Oriented PrestaShop

Oops is a tool for PrestaShop. 
It is designed to help develop robust modules faster.  

********
FEATURES
********

- Fully object oriented
- MVC layer built on Zend Framework
- ORM layer built on Propel ORM
- Module namespace, easy autoload
- PHP and/or Smarty templates

************
INSTALLATION
************

Download the Oops package (https://github.com/alexsegura/Oops/downloads). 

The archive contains 3 folders : 
|-- modules/
|-- overrides/
|-- tools/ 

Oops is packaged with Zend and Propel, located in the tools/ folder, together with Oops itself. 
Just unzip the contents of the archive in the same folders of PrestaShop. 

***************
GETTING STARTED
***************

Check out the example "Hello, Oops" module for a concrete example of creating a module with Oops !

1. Directory structure

Oops offers Zend_Application support to develop modules. 

To learn more about how to build an application using Zend, 
check http://framework.zend.com/manual/en/learning.quickstart.intro.html.
 
Actually, a module created with Oops is a Zend_Application, that is customized
to fit within PrestaShop. 
Every module in Oops is composed of a back-office and a front-office part, each 
with their own controllers and views. 

The following minimal directory structure is assumed for a module : 

mymodule/
|-- mymodule.php
`-- application/
    |-- configs/
    |   `-- application.ini
    |-- back-office/
    |   `-- controllers/
    |   `-- views/
    |       `-- scripts/
    |-- front-office/
    |   `-- controllers/
    |   `-- views/
    |       `-- scripts/
    `-- models/
    
2. Naming conventions

By default, any class in your module is namespaced with the name of the module, i.e the name 
of the main module class. This way, you are sure that your module classes will never conflict 
with another class having the same name. 
Provided your classes follow the naming conventions, you don't have to take care about loading 
them, they will be loaded automatically by Oops. 

Oops uses a custom version of the Module Resource Autoloader, which allows to namespace application 
components in a more sophisticated way. 
http://framework.zend.com/manual/en/zend.loader.autoloader-resource.html#zend.loader.autoloader-resource.module
You can use the standard directory structure in the back/front office components of the application. 

mymodule/
|-- mymodule.php                        => class MyModule
`-- application/
    |-- back-office/
    |   |-- controllers/
    |   |   `-- IndexController.php     => class MyModule_BackOffice_IndexController
    |   `-- forms/
    |       `-- Preferences.php         => class MyModule_BackOffice_Form_Preferences
    |-- front-office/
    |   |-- controllers/
    |   |   `-- IndexController.php     => class MyModule_FrontOffice_IndexController
    |   `-- models/
    |       `-- Foo.php                 => class MyModule_FrontOffice_Model_Foo
    |-- models/
    |   `-- Util.php                    => class MyModule_Model_Util
    `-- forms/
        `-- Subscribe.php               => class MyModule_Form_Subscribe






